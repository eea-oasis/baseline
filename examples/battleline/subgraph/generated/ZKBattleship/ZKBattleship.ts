// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GameCreated extends ethereum.Event {
  get params(): GameCreated__Params {
    return new GameCreated__Params(this);
  }
}

export class GameCreated__Params {
  _event: GameCreated;

  constructor(event: GameCreated) {
    this._event = event;
  }

  get _room(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class GameStarted extends ethereum.Event {
  get params(): GameStarted__Params {
    return new GameStarted__Params(this);
  }
}

export class GameStarted__Params {
  _event: GameStarted;

  constructor(event: GameStarted) {
    this._event = event;
  }

  get _room(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Placed extends ethereum.Event {
  get params(): Placed__Params {
    return new Placed__Params(this);
  }
}

export class Placed__Params {
  _event: Placed;

  constructor(event: Placed) {
    this._event = event;
  }

  get _room(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _proof(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class ShotFired extends ethereum.Event {
  get params(): ShotFired__Params {
    return new ShotFired__Params(this);
  }
}

export class ShotFired__Params {
  _event: ShotFired;

  constructor(event: ShotFired) {
    this._event = event;
  }

  get _room(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _x(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get _y(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get _by(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ShotLanded extends ethereum.Event {
  get params(): ShotLanded__Params {
    return new ShotLanded__Params(this);
  }
}

export class ShotLanded__Params {
  _event: ShotLanded;

  constructor(event: ShotLanded) {
    this._event = event;
  }

  get _room(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _x(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get _y(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get _proof(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class Won extends ethereum.Event {
  get params(): Won__Params {
    return new Won__Params(this);
  }
}

export class Won__Params {
  _event: Won;

  constructor(event: Won) {
    this._event = event;
  }

  get _room(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ZKBattleship__gamesResult {
  value0: boolean;
  value1: i32;
  value2: boolean;

  constructor(value0: boolean, value1: i32, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class ZKBattleship extends ethereum.SmartContract {
  static bind(address: Address): ZKBattleship {
    return new ZKBattleship("ZKBattleship", address);
  }

  WIDTH(): i32 {
    let result = super.call("WIDTH", "WIDTH():(uint8)", []);

    return result[0].toI32();
  }

  try_WIDTH(): ethereum.CallResult<i32> {
    let result = super.tryCall("WIDTH", "WIDTH():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  WIN_HITS(): BigInt {
    let result = super.call("WIN_HITS", "WIN_HITS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_WIN_HITS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("WIN_HITS", "WIN_HITS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createGame(_board: Bytes, _proof: Bytes): BigInt {
    let result = super.call("createGame", "createGame(bytes,bytes):(uint256)", [
      ethereum.Value.fromBytes(_board),
      ethereum.Value.fromBytes(_proof)
    ]);

    return result[0].toBigInt();
  }

  try_createGame(_board: Bytes, _proof: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createGame",
      "createGame(bytes,bytes):(uint256)",
      [ethereum.Value.fromBytes(_board), ethereum.Value.fromBytes(_proof)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gameLock(param0: Address): BigInt {
    let result = super.call("gameLock", "gameLock(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_gameLock(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gameLock", "gameLock(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gameNonce(): BigInt {
    let result = super.call("gameNonce", "gameNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gameNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gameNonce", "gameNonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  games(param0: BigInt): ZKBattleship__gamesResult {
    let result = super.call("games", "games(uint256):(bool,uint8,bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new ZKBattleship__gamesResult(
      result[0].toBoolean(),
      result[1].toI32(),
      result[2].toBoolean()
    );
  }

  try_games(param0: BigInt): ethereum.CallResult<ZKBattleship__gamesResult> {
    let result = super.tryCall("games", "games(uint256):(bool,uint8,bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ZKBattleship__gamesResult(
        value[0].toBoolean(),
        value[1].toI32(),
        value[2].toBoolean()
      )
    );
  }

  uuids(param0: Address, param1: BigInt): i32 {
    let result = super.call("uuids", "uuids(address,uint256):(uint8)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toI32();
  }

  try_uuids(param0: Address, param1: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("uuids", "uuids(address,uint256):(uint8)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class CreateGameCall extends ethereum.Call {
  get inputs(): CreateGameCall__Inputs {
    return new CreateGameCall__Inputs(this);
  }

  get outputs(): CreateGameCall__Outputs {
    return new CreateGameCall__Outputs(this);
  }
}

export class CreateGameCall__Inputs {
  _call: CreateGameCall;

  constructor(call: CreateGameCall) {
    this._call = call;
  }

  get _board(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _proof(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CreateGameCall__Outputs {
  _call: CreateGameCall;

  constructor(call: CreateGameCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class JoinGameCall extends ethereum.Call {
  get inputs(): JoinGameCall__Inputs {
    return new JoinGameCall__Inputs(this);
  }

  get outputs(): JoinGameCall__Outputs {
    return new JoinGameCall__Outputs(this);
  }
}

export class JoinGameCall__Inputs {
  _call: JoinGameCall;

  constructor(call: JoinGameCall) {
    this._call = call;
  }

  get _room(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _board(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _proof(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class JoinGameCall__Outputs {
  _call: JoinGameCall;

  constructor(call: JoinGameCall) {
    this._call = call;
  }
}

export class ShootCall extends ethereum.Call {
  get inputs(): ShootCall__Inputs {
    return new ShootCall__Inputs(this);
  }

  get outputs(): ShootCall__Outputs {
    return new ShootCall__Outputs(this);
  }
}

export class ShootCall__Inputs {
  _call: ShootCall;

  constructor(call: ShootCall) {
    this._call = call;
  }

  get _room(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _x(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _y(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _prevRound(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ShootCall__Outputs {
  _call: ShootCall;

  constructor(call: ShootCall) {
    this._call = call;
  }
}
