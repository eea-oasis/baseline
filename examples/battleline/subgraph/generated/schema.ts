// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Game extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Game entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Game entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Game", id.toString(), this);
  }

  static load(id: string): Game | null {
    return store.get("Game", id) as Game | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get boards(): Array<Bytes> {
    let value = this.get("boards");
    return value.toBytesArray();
  }

  set boards(value: Array<Bytes>) {
    this.set("boards", Value.fromBytesArray(value));
  }

  get moves(): Array<string> {
    let value = this.get("moves");
    return value.toStringArray();
  }

  set moves(value: Array<string>) {
    this.set("moves", Value.fromStringArray(value));
  }

  get started(): boolean {
    let value = this.get("started");
    return value.toBoolean();
  }

  set started(value: boolean) {
    this.set("started", Value.fromBoolean(value));
  }

  get winner(): Bytes {
    let value = this.get("winner");
    return value.toBytes();
  }

  set winner(value: Bytes) {
    this.set("winner", Value.fromBytes(value));
  }

  get won(): boolean {
    let value = this.get("won");
    return value.toBoolean();
  }

  set won(value: boolean) {
    this.set("won", Value.fromBoolean(value));
  }
}

export class Move extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Move entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Move entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Move", id.toString(), this);
  }

  static load(id: string): Move | null {
    return store.get("Move", id) as Move | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get by(): Bytes {
    let value = this.get("by");
    return value.toBytes();
  }

  set by(value: Bytes) {
    this.set("by", Value.fromBytes(value));
  }

  get game(): string {
    let value = this.get("game");
    return value.toString();
  }

  set game(value: string) {
    this.set("game", Value.fromString(value));
  }

  get landed(): boolean {
    let value = this.get("landed");
    return value.toBoolean();
  }

  set landed(value: boolean) {
    this.set("landed", Value.fromBoolean(value));
  }

  get proof(): Bytes | null {
    let value = this.get("proof");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proof(value: Bytes | null) {
    if (value === null) {
      this.unset("proof");
    } else {
      this.set("proof", Value.fromBytes(value as Bytes));
    }
  }
}
