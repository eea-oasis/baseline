{
	"info": {
		"_postman_id": "65b6f616-2edd-4934-a124-4646fd80934c",
		"name": "integration-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "containers health check",
			"item": [
				{
					"name": "buyer containers health check",
					"item": [
						{
							"name": "buyer radish rest api health check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b541692-c302-42d0-a1aa-38cacff19fb7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8001/api/v1/health",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8001",
									"path": [
										"api",
										"v1",
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "buyer radish graphql api health check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var res = JSON.parse(responseBody);",
											"",
											"",
											"pm.test('should return a valid response', () => {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"pm.test('should return createRFP._id', () => {",
											"    pm.expect(res.data.myWalletBalance).to.exist;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query\n{ \n    myWalletBalance\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8001/graphql",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8001",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "buyer messenger-api health check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b541692-c302-42d0-a1aa-38cacff19fb7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:4001/api/v1/health",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4001",
									"path": [
										"api",
										"v1",
										"health"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "supplier containers health check",
					"item": [
						{
							"name": "supplier1 radish rest api health check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b541692-c302-42d0-a1aa-38cacff19fb7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8001/api/v1/health",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8001",
									"path": [
										"api",
										"v1",
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "supplier2 radish rest api health check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b541692-c302-42d0-a1aa-38cacff19fb7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8003/api/v1/health",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8003",
									"path": [
										"api",
										"v1",
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "supplier1 radish graphql api health check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var res = JSON.parse(responseBody);",
											"",
											"",
											"pm.test('should return a valid response', () => {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"pm.test('should return createRFP._id', () => {",
											"    pm.expect(res.data.myWalletBalance).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query\n{ \n    myWalletBalance\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8002/graphql",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "supplier2 radish graphql api health check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var res = JSON.parse(responseBody);",
											"",
											"",
											"pm.test('should return a valid response', () => {",
											"    pm.response.to.not.be.error;",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"pm.test('should return createRFP._id', () => {",
											"    pm.expect(res.data.myWalletBalance).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query\n{ \n    myWalletBalance\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "http://localhost:8003/graphql",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8003",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "supplier1 messenger-api health check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b541692-c302-42d0-a1aa-38cacff19fb7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:4002/api/v1/health",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4002",
									"path": [
										"api",
										"v1",
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "supplier2 messenger-api health check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b541692-c302-42d0-a1aa-38cacff19fb7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:4003/api/v1/health",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "4003",
									"path": [
										"api",
										"v1",
										"health"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "retrieve buyer identity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63b093a3-f6e6-427c-92eb-586507fbc8ec",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return verificationKeyID', () => {",
							"    pm.expect(res[0].createdDate).to.exist;",
							"});",
							"",
							"pm.test('should return verificationKey', () => {",
							"    pm.expect(res[0].publicKey).to.exist;",
							"});",
							"",
							"pm.globals.set(\"buyerMessengerId\", res[0].publicKey);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4001/api/v1/identities",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4001",
					"path": [
						"api",
						"v1",
						"identities"
					]
				}
			},
			"response": []
		},
		{
			"name": "retrieve supplier1 identity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63b093a3-f6e6-427c-92eb-586507fbc8ec",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return verificationKeyID', () => {",
							"    pm.expect(res[0].createdDate).to.exist;",
							"});",
							"",
							"pm.test('should return verificationKey', () => {",
							"    pm.expect(res[0].publicKey).to.exist;",
							"});",
							"",
							"pm.globals.set(\"supplier1MessengerId\", res[0].publicKey);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4002/api/v1/identities",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4002",
					"path": [
						"api",
						"v1",
						"identities"
					]
				}
			},
			"response": []
		},
		{
			"name": "retrieve supplier2 identity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63b093a3-f6e6-427c-92eb-586507fbc8ec",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return verificationKeyID', () => {",
							"    pm.expect(res[0].createdDate).to.exist;",
							"});",
							"",
							"pm.test('should return verificationKey', () => {",
							"    pm.expect(res[0].publicKey).to.exist;",
							"});",
							"",
							"pm.globals.set(\"supplier2MessengerId\", res[0].publicKey);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4003/api/v1/identities",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4003",
					"path": [
						"api",
						"v1",
						"identities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buyer creates RFP - success",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return createRFP.sku', () => {",
							"    pm.expect(res.data.createRFP.sku).to.exist;",
							"    pm.expect(res.data.createRFP.sku).to.equal(\"SKU-1234\");",
							"});",
							"",
							"pm.test('should return createRFP._id', () => {",
							"    pm.expect(res.data.createRFP._id).to.exist;",
							"});",
							"",
							"pm.globals.set(\"sku\", res.data.createRFP.sku);",
							"pm.globals.set(\"rfpId\", res.data.createRFP._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation($supplier1MessengerId:String!, $supplier2MessengerId:String!){\n          createRFP( input: {\n            sku: \"SKU-1234\",\n            skuDescription: \"Component AAA\",\n            description: \"Description for AAA\",\n            proposalDeadline: 1585663500,\n            recipients: \n            [\n              { \n                partner: \n                { \n                  identity: $supplier1MessengerId,\n                  name: \"Supplier 1\",\n                  address:   \"0x5ACcdCCE3E60BD98Af2dc48aaf9D1E35E7EC8B5f\",\n                  role: \"supplier\",\n                  zkpPublicKey: \"0x99246c83ca94b55a7330f68952ee74574a7d3b1921ccf29c84f75975935e6333\"\n                }\n              },\n              { \n                partner: \n                { \n                  identity: $supplier2MessengerId,\n                  name: \"Supplier 2\",\n                  address: \"0x3f7eB8a7d140366423e9551e9532F4bf1A304C65\",\n                  role: \"supplier\",\n                  zkpPublicKey: \"0x99246c83ca94b55a7330f68952ee74574a7d3b1921ccf29c84f75975935e6333\"\n                }\n              }\n            ]\n          })\n          { _id, sku } \n        } \n",
						"variables": "{\n\t\"supplier1MessengerId\":\"{{supplier1MessengerId}}\",\n\t\"supplier2MessengerId\":\"{{supplier2MessengerId}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:8001/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8001",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buyer checks RFP existence",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"var rfpId = pm.globals.get(\"rfpId\");",
							"var sku = pm.globals.get(\"sku\");",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return createRFP.sku', () => {",
							"    pm.expect(res.data.rfp.sku).to.exist;",
							"    pm.expect(res.data.rfp.sku).to.equal(sku);",
							"});",
							"",
							"pm.test('should return createRFP._id', () => {",
							"    pm.expect(res.data.rfp._id).to.exist;",
							"    pm.expect(res.data.rfp._id).to.equal(rfpId);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query($rfpId:String!)\n{ \n    rfp(uuid: $rfpId) \n    { _id, sku } \n}\n",
						"variables": "{\n\t\"rfpId\":\"{{rfpId}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:8001/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8001",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Supplier1 checks RFP existence",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"var rfpId = pm.globals.get(\"rfpId\");",
							"var sku = pm.globals.get(\"sku\");",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return sku', () => {",
							"    pm.expect(res.data.rfp.sku).to.exist;",
							"    pm.expect(res.data.rfp.sku).to.equal(sku);",
							"});",
							"",
							"pm.test('should return rfp id', () => {",
							"    pm.expect(res.data.rfp._id).to.exist;",
							"    pm.expect(res.data.rfp._id).to.equal(rfpId);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query($rfpId:String!)\n{ \n    rfp(uuid: $rfpId) \n    { _id, sku } \n}",
						"variables": "{\n\t\"rfpId\":\"{{rfpId}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:8002/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8002",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Supplier2 checks RFP existence",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"var rfpId = pm.globals.get(\"rfpId\");",
							"var sku = pm.globals.get(\"sku\");",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return sku', () => {",
							"    pm.expect(res.data.rfp.sku).to.exist;",
							"    pm.expect(res.data.rfp.sku).to.equal(sku);",
							"});",
							"",
							"pm.test('should return rfp id', () => {",
							"    pm.expect(res.data.rfp._id).to.exist;",
							"    pm.expect(res.data.rfp._id).to.equal(rfpId);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query($rfpId:String!)\n{ rfp(uuid: $rfpId) \n{ \n    _id, \n    sku, \n    recipients \n    { \n        signature \n        { \n            sentDate receivedDate messageId \n        } \n    } \n} \n}",
						"variables": "{\n\t\"rfpId\":\"{{rfpId}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:8003/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8003",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buyer checks RFP details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"var rfpId = pm.globals.get(\"rfpId\");",
							"var sku = pm.globals.get(\"sku\");",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return sku', () => {",
							"    pm.expect(res.data.rfp.sku).to.exist;",
							"    pm.expect(res.data.rfp.sku).to.equal(sku);",
							"});",
							"",
							"pm.test('should return rfp id', () => {",
							"    pm.expect(res.data.rfp._id).to.exist;",
							"    pm.expect(res.data.rfp._id).to.equal(rfpId);",
							"});",
							"",
							"pm.globals.set(\"messageId1\", res.data.rfp.recipients[0].origination.messageId);",
							"pm.globals.set(\"messageId2\", res.data.rfp.recipients[1].origination.messageId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query($rfpId:String!)\n{ \n    rfp(uuid: $rfpId) \n    { \n        _id, \n        sku, \n        recipients \n        { origination \n            { messageId, receiptDate }\n          signature \n            { \n            sentDate receivedDate messageId \n            } \n        } \n    } \n}\n",
						"variables": "{\n\t\"rfpId\":\"{{rfpId}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:8001/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8001",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buyer retrieves RFP details sent to Supplier1 via messenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63b093a3-f6e6-427c-92eb-586507fbc8ec",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"var rfpId = pm.globals.get(\"rfpId\");",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return payload', () => {",
							"    pm.expect(res.payload).to.exist;",
							"});",
							"",
							"var payload = JSON.parse(res.payload);",
							"",
							"pm.test('should match rfpId', () => {",
							"    pm.expect(payload.uuid).to.equal(rfpId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-messenger-id",
						"value": "{{buyerMessengerId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:4001/api/v1/messages/{{messageId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4001",
					"path": [
						"api",
						"v1",
						"messages",
						"{{messageId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buyer retrieves RFP details sent to Supplier2 via messenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63b093a3-f6e6-427c-92eb-586507fbc8ec",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"var rfpId = pm.globals.get(\"rfpId\");",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return payload', () => {",
							"    pm.expect(res.payload).to.exist;",
							"});",
							"",
							"var payload = JSON.parse(res.payload);",
							"",
							"pm.test('should match rfpId', () => {",
							"    pm.expect(payload.uuid).to.equal(rfpId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-messenger-id",
						"value": "{{buyerMessengerId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:4001/api/v1/messages/{{messageId2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4001",
					"path": [
						"api",
						"v1",
						"messages",
						"{{messageId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Supplier1 retrieves RFP details from messenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63b093a3-f6e6-427c-92eb-586507fbc8ec",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"var rfpId = pm.globals.get(\"rfpId\");",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return payload', () => {",
							"    pm.expect(res.payload).to.exist;",
							"});",
							"",
							"var payload = JSON.parse(res.payload);",
							"",
							"pm.test('should match rfpId', () => {",
							"    pm.expect(payload.uuid).to.equal(rfpId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-messenger-id",
						"value": "{{supplier1MessengerId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:4002/api/v1/messages/{{messageId1}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4002",
					"path": [
						"api",
						"v1",
						"messages",
						"{{messageId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Supplier2 retrieves RFP details from messenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63b093a3-f6e6-427c-92eb-586507fbc8ec",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"var rfpId = pm.globals.get(\"rfpId\");",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return payload', () => {",
							"    pm.expect(res.payload).to.exist;",
							"});",
							"",
							"var payload = JSON.parse(res.payload);",
							"",
							"pm.test('should match rfpId', () => {",
							"    pm.expect(payload.uuid).to.equal(rfpId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-messenger-id",
						"value": "{{supplier2MessengerId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:4003/api/v1/messages/{{messageId2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4003",
					"path": [
						"api",
						"v1",
						"messages",
						"{{messageId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Supplier1 creates proposal",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"",
							"",
							"pm.test('should return createRFP._id', () => {",
							"    pm.expect(res.data.createProposal._id).to.exist;",
							"});",
							"",
							"pm.globals.set(\"proposalId1\", res.data.createProposal._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation($rfpId:String!, $buyerMessengerId:String!){\n  createProposal(input: \n    { rfpId: $rfpId, \n      rates: [\n        {\n\t\t\tstartRange : 0,\n\t\t\tendRange : 100,\n\t\t\tprice : 10.0,\n\t\t\tunitOfMeasure : \"Price Per Unit\"\n        },\n        {\n\t\t\tstartRange : 101,\n\t\t\tendRange : 200,\n\t\t\tprice : 9.0,\n\t\t\tunitOfMeasure : \"Price Per Unit\"\n        },\n        {\n\t\t\tstartRange : 201,\n\t\t\tendRange : 300,\n\t\t\tprice : 8.0,\n\t\t\tunitOfMeasure : \"Price Per Unit\"\n      }\n        \n      ],\n      erc20ContractAddress: \"0xcd234a471b72ba2f1ccf0a70fcaba648a5eecd8d\",\n  recipient: $buyerMessengerId\n    }\n  )\n  {\n      _id\n    rfpId\n    rates {\n      startRange\n      endRange\n      price\n      unitOfMeasure\n    }\n    sender\n  }\n}",
						"variables": "{\n\t\"rfpId\":\"{{rfpId}}\",\n\t\"buyerMessengerId\": \"{{buyerMessengerId}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:8002/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8002",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Supplier1 retrieves proposal by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"var proposalId = pm.globals.get(\"proposalId1\");",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"",
							"",
							"pm.test('should return proposal._id', () => {",
							"    pm.expect(res.data.proposal._id).to.exist;",
							"    pm.expect(res.data.proposal._id).to.equal(proposalId);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query($proposalId:String!){\n  proposal(id: $proposalId)\n  {\n    _id\n    rfpId\n    rates {\n      startRange\n      endRange\n      price\n      unitOfMeasure\n    }\n    sender\n\n  }\n}",
						"variables": "{\n\t\"proposalId\":\"{{proposalId1}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:8002/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8002",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buyer retrieves Supplier1 proposal by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"var proposalId = pm.globals.get(\"proposalId1\");",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"",
							"",
							"pm.test('should return proposal._id', () => {",
							"    pm.expect(res.data.proposal._id).to.exist;",
							"    pm.expect(res.data.proposal._id).to.equal(proposalId);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query($proposalId:String!){\n  proposal(id: $proposalId)\n  {\n    _id\n    rfpId\n    rates {\n      startRange\n      endRange\n      price\n      unitOfMeasure\n    }\n    sender\n\n  }\n}",
						"variables": "{\n\t\"proposalId\":\"{{proposalId1}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:8001/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8001",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Supplier2 creates proposal",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"",
							"",
							"pm.test('should return createRFP._id', () => {",
							"    pm.expect(res.data.createProposal._id).to.exist;",
							"});",
							"",
							"pm.globals.set(\"proposalId2\", res.data.createProposal._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation($rfpId:String!, $buyerMessengerId:String!){\n  createProposal(input: \n    { rfpId: $rfpId, \n      rates: [\n        {\n\t\t\tstartRange : 0,\n\t\t\tendRange : 50,\n\t\t\tprice : 10.50,\n\t\t\tunitOfMeasure : \"Price Per Unit\"\n        },\n        {\n\t\t\tstartRange : 51,\n\t\t\tendRange : 500,\n\t\t\tprice : 9.5,\n\t\t\tunitOfMeasure : \"Price Per Unit\"\n        },\n        {\n\t\t\tstartRange : 501,\n\t\t\tendRange : 1000,\n\t\t\tprice : 8.5,\n\t\t\tunitOfMeasure : \"Price Per Unit\"\n      }\n        \n      ],\n  erc20ContractAddress: \"0xcd234a471b72ba2f1ccf0a70fcaba648a5eecd8d\",\n  recipient: $buyerMessengerId\n    }\n  )\n  {\n      _id\n    rfpId\n    rates {\n      startRange\n      endRange\n      price\n      unitOfMeasure\n    }\n    sender\n  }\n}",
						"variables": "{\n\t\"rfpId\":\"{{rfpId}}\",\n\t\"buyerMessengerId\": \"{{buyerMessengerId}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:8003/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8003",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Supplier2 retrieves proposal by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"var proposalId = pm.globals.get(\"proposalId2\");",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"",
							"",
							"pm.test('should return proposal._id', () => {",
							"    pm.expect(res.data.proposal._id).to.exist;",
							"    pm.expect(res.data.proposal._id).to.equal(proposalId);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query($proposalId:String!){\n  proposal(id: $proposalId)\n  {\n    _id\n    rfpId\n    rates {\n      startRange\n      endRange\n      price\n      unitOfMeasure\n    }\n    sender\n\n  }\n}",
						"variables": "{\n\t\"proposalId\":\"{{proposalId2}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:8003/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8003",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buyer retrieves Supplier2 proposal by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"var proposalId = pm.globals.get(\"proposalId2\");",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"",
							"",
							"pm.test('should return proposal._id', () => {",
							"    pm.expect(res.data.proposal._id).to.exist;",
							"    pm.expect(res.data.proposal._id).to.equal(proposalId);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query($proposalId:String!){\n  proposal(id: $proposalId)\n  {\n    _id\n    rfpId\n    rates {\n      startRange\n      endRange\n      price\n      unitOfMeasure\n    }\n    sender\n\n  }\n}",
						"variables": "{\n\t\"proposalId\":\"{{proposalId2}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:8001/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8001",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buyer creates MSA",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4322c789-ef0b-4923-b926-95cb7b094e73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = JSON.parse(responseBody);",
							"",
							"pm.test('should return a valid response', () => {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test('should return createMSA.sku', () => {",
							"    pm.expect(res.data.createMSA.sku).to.exist;",
							"    pm.expect(res.data.createMSA.sku).to.equal(\"SKU-1234567\");",
							"});",
							"",
							"pm.test('should return createMSA._id', () => {",
							"    pm.expect(res.data.createMSA._id).to.exist;",
							"});",
							"",
							"pm.test('should return createMSA.commitments', () => {",
							"    pm.expect(res.data.createMSA.commitments).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation($rfpId:String!){\n        createMSA( input: {\n          rfpId: $rfpId,\n          supplierAddress: \"0x5ACcdCCE3E60BD98Af2dc48aaf9D1E35E7EC8B5f\",\n          tierBounds: [1, 200, 400, 600],\n          pricesByTier: [10, 9, 8],\n          sku: \"SKU-1234567\",\n          erc20ContractAddress: \"0xcd234a471b72ba2f1ccf0a70fcaba648a5eecd8d\",\n        })\n        { zkpPublicKeyOfBuyer, zkpPublicKeyOfSupplier, sku, _id, \n        commitments { commitment, salt }\n        }\n     }\n",
						"variables": "{\n\t\"rfpId\":\"{{rfpId}}\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:8001/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8001",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ff2b7586-3e7b-417b-a4e7-517178367f73",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d10233f7-e078-4d4c-abc0-33d886d379fb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}
